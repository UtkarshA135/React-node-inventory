{"version":3,"sources":["AppNavbar.js","Home.js","ItemList.js","ItemEdit.js","LimitedItemList.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","props","state","isOpen","toggle","bind","this","setState","color","dark","expand","tag","Link","to","onClick","navbar","className","href","Component","Home","fluid","ItemList","items","isLoading","remove","fetch","then","response","json","data","id","a","method","headers","console","log","updatedItems","filter","i","_id","itemList","map","item","key","style","whiteSpace","name","item_id","open_stock","limit_stock","fontSize","category","price","size","outlined","marginRight","width","ItemEdit","emptyItem","dropDownOpen","handle","code","handleChange","handleSubmit","match","params","event","target","value","preventDefault","body","JSON","stringify","history","push","title","onSubmit","for","type","onChange","autoComplete","caret","dropDownValue","withRouter","LimitedItemList","App","Switch","Route","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a059a4e6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Collapse, Nav, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class AppNavbar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {isOpen: false};\r\n    this.toggle = this.toggle.bind(this);\r\n  }\r\n\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return <Navbar color=\"dark\" dark expand=\"md\">\r\n      <NavbarBrand tag={Link} to=\"/\">My Inventory</NavbarBrand>\r\n      <NavbarToggler onClick={this.toggle}/>\r\n      <Collapse isOpen={this.state.isOpen} navbar>\r\n        <Nav className=\"ml-auto\" navbar>\r\n          <NavItem>\r\n            <NavLink\r\n              href=\"https://utkarsha135.github.io/cmd-port/\">My Portfolio</NavLink>\r\n          </NavItem>\r\n          <NavItem>\r\n            <NavLink href=\"https://github.com/UtkarshA135/React-node-inventory\">GitHub Repo</NavLink>\r\n          </NavItem>\r\n        </Nav>\r\n      </Collapse>\r\n    </Navbar>;\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport AppNavbar from './AppNavbar';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Container } from 'reactstrap';\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <AppNavbar/>\r\n        <Container fluid>\r\n          <Button color=\"link\"><Link to=\"/items\">Manage Item List</Link></Button>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport { Button, ButtonGroup, Container, Table } from 'reactstrap';\r\nimport AppNavbar from './AppNavbar';\r\nimport { Link } from 'react-router-dom';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nclass ItemList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {items: [], isLoading: true};\r\n    this.remove = this.remove.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({isLoading: true});\r\n\r\n    fetch('/api/items')\r\n      .then(response => response.json())\r\n      .then(data => this.setState({items: data, isLoading: false}));\r\n  }\r\n\r\n  async remove(id) {\r\n    await fetch(`/api/item/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(() => {\r\n      console.log(\"Remove Done!\");\r\n      let updatedItems = [...this.state.items].filter(i => i._id !== id);\r\n      this.setState({items: updatedItems});\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {items, isLoading} = this.state;\r\n\r\n    if (isLoading) {\r\n      return <p>Loading...</p>;\r\n    }\r\n\r\n    const itemList = items.map(item => {\r\n      return <tr key={item._id}>\r\n        <td style={{whiteSpace: 'nowrap'}}>{item.name}</td>\r\n        <td>{item.item_id}</td>\r\n        <td>{item.open_stock}<span>{item.open_stock<item.limit_stock?<WarningIcon color=\"error\" fontSize=\"small\"/>:<div></div>}</span></td>\r\n        <td>{item.category}</td>\r\n        <td>{item.limit_stock}</td>\r\n        \r\n        <td>&#x20B9; {item.price*item.open_stock}</td>\r\n        <td>\r\n          <ButtonGroup>\r\n            <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/items/\" + item._id}>Edit</Button>\r\n            <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(item._id)}>Delete</Button>\r\n          </ButtonGroup>\r\n        </td>\r\n      </tr>\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <AppNavbar/>\r\n        <Container fluid>\r\n          <div className=\"float-right\">\r\n            <Button color=\"success\" tag={Link} to=\"/items/new\">Add Item</Button>\r\n          </div>\r\n          <div className=\"float-right\">\r\n            <Button outlined style={{marginRight:\"2px\"}} tag={Link} to=\"/limititems\">Show Low Stock</Button>\r\n          </div>\r\n          <h3>Item List</h3>\r\n          <Table className=\"mt-4\">\r\n            <thead>\r\n              <tr>\r\n                <th width=\"20%\">Item Name</th>\r\n                <th width=\"10%\">Item ID</th>\r\n                <th width=\"20%\">Availabe Stock</th>\r\n                <th>Category</th>\r\n                <th>Limit</th>\r\n                <th width=\"10%\">Price</th>\r\n                <th width=\"10%\">Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n            {itemList}\r\n            </tbody>\r\n          </Table>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ItemList;","import React, { Component } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport AppNavbar from './AppNavbar';\r\nimport { ButtonDropdown, DropdownItem, DropdownMenu, DropdownToggle, Dropdown } from \"reactstrap\"\r\n\r\nclass ItemEdit extends Component {\r\n\r\n  emptyItem = {\r\n    name: '',\r\n    item_id: '',\r\n    open_stock:'',\r\n    limit_stock:'',\r\n    price:'',\r\n     _id:'',\r\n    category: '',\r\n    dropDownOpen: '',\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      item: this.emptyItem\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    //this.convertedImage = this.convertedImage.bind(this);\r\n  }\r\n \r\n  toggle = () => {\r\n    this.setState({\r\n       dropDownOpen: !this.state.dropDownOpen,\r\n    })\r\n}\r\n  async componentDidMount() {\r\n    if (this.props.match.params.id !== 'new') {\r\n      const item = await (await fetch(`/api/item/${this.props.match.params.id}`)).json();\r\n      this.setState({item: item});\r\n    }\r\n  }\r\n  handle = (code) => {\r\n    let item = {...this.state.item};\r\n    item['category']=code;\r\n    this.setState({\r\n     item\r\n    })\r\n}\r\n  handleChange(event) {\r\n  \r\n   //console.log(event.target.value);\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n    let item = {...this.state.item};\r\n    item[name] = value;\r\n    this.setState({item});\r\n    //console.log(item);\r\n  }\r\n\r\n  async handleSubmit(event) {\r\n    event.preventDefault();\r\n    const {item} = this.state;\r\n\r\n    await fetch('/api/item', {\r\n      method: (item._id) ? 'PUT' : 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(item),\r\n    });\r\n    this.props.history.push('/items');\r\n  }\r\n\r\n  render() {\r\n    const {item} = this.state;\r\n    const title = <h2>{item._id ? 'Edit Item' : 'Add Item'}</h2>;\r\n  \r\n    return <div>\r\n      <AppNavbar/>\r\n      <Container>\r\n        {title}\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <FormGroup>\r\n          \r\n            <Label for=\"name\">Item Name</Label>\r\n            <Input type=\"text\" name=\"name\" id=\"name\" value={item.name || ''}\r\n                   onChange={this.handleChange} autoComplete=\"name\"/>\r\n          </FormGroup>\r\n          <FormGroup>\r\n        \r\n          <Label for=\"item_id\">Item Id</Label>\r\n            <Input type=\"text\" name=\"item_id\" id=\"item_id\" value={item.item_id || ''}\r\n                   onChange={this.handleChange} autoComplete=\"item_id\"/>\r\n          </FormGroup>   \r\n          <FormGroup>\r\n          <ButtonDropdown name=\"category\"  >\r\n        <Dropdown isOpen={this.state.dropDownOpen} toggle={this.toggle} >\r\n            <DropdownToggle color=\"primary\" caret className=\"dropdown-toggle\">\r\n                Select Category\r\n            </DropdownToggle>\r\n            <DropdownMenu className=\"category-dropdown\">\r\n                    <DropdownItem onClick={() => this.handle(\"Panel\")} dropDownValue=\"Panel\">Panel</DropdownItem>\r\n                    <DropdownItem onClick={() => this.handle('Inverter')} dropDownValue=\"Inverter\">Inverter</DropdownItem>\r\n                    <DropdownItem onClick={() => this.handle(\"Wire\")} dropDownValue=\"Wire\">Wire</DropdownItem>\r\n                    <DropdownItem onClick={() => this.handle(\"MCU4 Connector\")} dropDownValue=\"MCU4 Connector\">MCU4 Connector</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        </ButtonDropdown>\r\n\r\n          </FormGroup>       \r\n          <FormGroup>\r\n            <Label for=\"open_stock\">Available Stock</Label>\r\n            <Input type=\"text\" name=\"open_stock\" id=\"open_stock\" value={item.open_stock || ''}\r\n                   onChange={this.handleChange} autoComplete=\"open_stock\"/>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"limit_stock\"> Stock Limit</Label>\r\n            <Input type=\"text\" name=\"limit_stock\" id=\"limit_stock\" value={item.limit_stock || ''}\r\n                   onChange={this.handleChange} autoComplete=\"address\"/>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"price\">Price (per piece)</Label>\r\n            <Input type=\"text\" name=\"price\" id=\"price\" value={item.price || ''}\r\n                   onChange={this.handleChange} autoComplete=\"address\"/>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\r\n            <Button color=\"secondary\" tag={Link} to=\"/items\">Cancel</Button>\r\n          </FormGroup>\r\n        </Form>\r\n      </Container>\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default withRouter(ItemEdit);","import React, { Component } from 'react';\r\nimport { Button, ButtonGroup, Container, Table } from 'reactstrap';\r\nimport AppNavbar from './AppNavbar';\r\nimport { Link } from 'react-router-dom';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nclass LimitedItemList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {items: [], isLoading: true};\r\n    this.remove = this.remove.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({isLoading: true});\r\n\r\n    fetch('/api/limititems')\r\n      .then(response => response.json())\r\n      .then(data => this.setState({items: data, isLoading: false}));\r\n  }\r\n\r\n  async remove(id) {\r\n    await fetch(`/api/item/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(() => {\r\n      console.log(\"Remove Done!\");\r\n      let updatedItems = [...this.state.items].filter(i => i._id !== id);\r\n      this.setState({items: updatedItems});\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {items, isLoading} = this.state;\r\n\r\n    if (isLoading) {\r\n      return <p>Loading...</p>;\r\n    }\r\n\r\n    const itemList = items.map(item => {\r\n      return <tr key={item._id}>\r\n        <td style={{whiteSpace: 'nowrap'}}>{item.name}</td>\r\n        <td>{item.item_id}</td>\r\n        <td>{item.open_stock}<span>{item.open_stock<item.limit_stock?<WarningIcon color=\"error\" fontSize=\"small\"/>:<div></div>}</span></td>\r\n        <td>{item.category}</td>\r\n        <td>{item.limit_stock}</td>\r\n        \r\n        <td>&#x20B9; {item.price*item.open_stock}</td>\r\n        <td>\r\n          <ButtonGroup>\r\n            <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/items/\" + item._id}>Edit</Button>\r\n            <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(item._id)}>Delete</Button>\r\n          </ButtonGroup>\r\n        </td>\r\n      </tr>\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <AppNavbar/>\r\n        <Container fluid>\r\n          <div className=\"float-right\">\r\n            <Button color=\"success\" tag={Link} to=\"/items/new\">Add Item</Button>\r\n          </div>\r\n          <div className=\"float-right\">\r\n            <Button outlined style={{marginRight:\"2px\"}} tag={Link} to=\"/items\">Show All</Button>\r\n          </div>\r\n          <h3>Item List</h3>\r\n          <Table className=\"mt-4\">\r\n            <thead>\r\n              <tr>\r\n                <th width=\"20%\">Item Name</th>\r\n                <th width=\"10%\">Item ID</th>\r\n                <th width=\"20%\">Availabe Stock</th>\r\n                <th>Category</th>\r\n                <th>Limit</th>\r\n                <th width=\"10%\">Price</th>\r\n                <th width=\"10%\">Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n            {itemList}\r\n            </tbody>\r\n          </Table>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LimitedItemList;","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './Home';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport ItemList from './ItemList';\nimport ItemEdit from './ItemEdit';\nimport LimitedItemList from './LimitedItemList';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route path='/' exact={true} component={Home}/>\n          <Route path='/items' exact={true} component={ItemList}/>\n          <Route path='/items/:id' component={ItemEdit}/>\n          <Route path='/limititems' component={LimitedItemList}/>\n        </Switch>\n      </Router>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}